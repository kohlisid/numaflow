/*
Copyright 2022 The Numaproj Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Openapi Generator. DO NOT EDIT.

/// RetryStrategy : RetryStrategy defines the criteria and method for retrying a failed write operation in the Sink. This type is used to customize how retries are handled, ensuring messages that fail to be delivered can be resent based on the configured strategy. It includes settings for fixed interval retry strategy and specific actions to take on failures.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetryStrategy {
    /// OnFailure specifies the action to take when a retry fails. The default action is to retry.
    #[serde(rename = "onFailure", skip_serializing_if = "Option::is_none")]
    pub on_failure: Option<String>,
    #[serde(rename = "retryCount", skip_serializing_if = "Option::is_none")]
    pub retry_count: Option<k8s_openapi::apimachinery::pkg::util::intstr::IntOrString>,
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<kube::core::Duration>,
}

impl RetryStrategy {
    /// RetryStrategy defines the criteria and method for retrying a failed write operation in the Sink. This type is used to customize how retries are handled, ensuring messages that fail to be delivered can be resent based on the configured strategy. It includes settings for fixed interval retry strategy and specific actions to take on failures.
    pub fn new() -> RetryStrategy {
        RetryStrategy {
            on_failure: None,
            retry_count: None,
            timeout: None,
        }
    }
}
